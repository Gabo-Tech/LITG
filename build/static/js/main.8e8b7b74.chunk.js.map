{"version":3,"sources":["components/Options.js","components/Output.js","App.js","reportWebVitals.js","index.js"],"names":["Options","props","paragraphs","includeHtml","setIncludeHtml","inputValue","setInputValue","tag","setTag","className","type","min","max","value","onChange","e","target","defaultValue","text","map","sentence","Output","App","useState","setParagraphs","useEffect","url","fetch","then","res","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e8b7b74.chunk.js","sourcesContent":["import React from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nconst Options = (props) => {\n    const {paragraphs, includeHtml, setIncludeHtml, inputValue, setInputValue, tag, setTag} = props;\n\n          \n\n    return (\n        <div className=\"options\">\n            <div className=\"wrapper\">\n                <div className=\"optionsContainer\">\n                    <div className=\"paragraphs\">\n                        <p>Paragraphs: </p>\n                        <input\n                        type=\"text\"\n                        min=\"1\"\n                        max=\"10\"\n                        value={inputValue}\n                        onChange={(e) => setInputValue(e.target.value)}\n                        />\n                    </div>\n                    <div className=\"tags\">\n                        <p>Tags: </p>\n                        <select defaultValue={tag} onChange={(e) => setTag(e.target.value)}>\n                            <option value=\"p\">&lt;p&gt;</option>\n                            <option value=\"h1\">&lt;h1&gt;</option>\n                            <option value=\"h2\">&lt;h2&gt;</option>\n                            <option value=\"h3\">&lt;h3&gt;</option>\n                            <option value=\"h4\">&lt;h4&gt;</option>\n                            <option value=\"h5\">&lt;h5&gt;</option>\n                            <option value=\"h6\">&lt;h6&gt;</option>\n                            <option value=\"span\">&lt;span&gt;</option>\n                        </select>\n                    </div>\n                    <div className=\"include\">\n                        <p>Include HTML: </p>\n                        <select defaultValue={includeHtml} onChange={(e) => setIncludeHtml(e.target.value)}>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"copy\">\n                    <CopyToClipboard text={paragraphs.map((sentence) => includeHtml === \"Yes\" ? `<${tag}>${sentence}</${tag}>` : sentence\n                    )}>\n                        <button>Copy to clipboard</button>\n                    </CopyToClipboard>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Options;","import React from 'react';\n\nconst Output = (props) => {\n    const {paragraphs, tag, includeHtml} = props;\n    return (\n        <div className=\"output\">\n            {includeHtml === \"Yes\" ? (\n                <p>{paragraphs.map((sentence) => `<${tag}>${sentence}</${tag}>`)}</p>\n            ) : (\n                <p>{paragraphs.map((sentence) => sentence)}</p>\n            )}\n        </div>\n    )\n}\n\nexport default Output\n","import React, {useState, useEffect} from 'react';\nimport Options from './components/Options';\nimport Output from './components/Output';\nimport './App.css';\n\nconst App = () => {\n  const [paragraphs, setParagraphs] = useState([]);\n  const [tag, setTag] = useState('p');\n  const [inputValue, setInputValue] = useState(1);\n  const [includeHtml, setIncludeHtml] = useState(\"Yes\");\n\n  useEffect(() => {\n    const url = `https://baconipsum.com/api/?type=all-meat&paras=${inputValue}&start-with-lorem=1`;\n\n    fetch(url)\n    .then ((res) => res.json())\n    .then ((data) => setParagraphs(data));\n  }, [inputValue]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"title\">\n          <h1>LITG</h1>\n          <h4>(Lorem Ipsum Text Generator)</h4>\n        </div>\n        <Options \n          paragraphs={paragraphs}\n          includeHtml={includeHtml}\n          setIncludeHtml={setIncludeHtml}\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n          tag={tag}\n          setTag={setTag}\n        />\n        <Output paragraphs={paragraphs} tag={tag} includeHtml={includeHtml}/>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}